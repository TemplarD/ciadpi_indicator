#!/usr/bin/env python3

import gi
import re
import subprocess
import threading
import time
import os
import json
import shutil
from pathlib import Path
from datetime import datetime
from typing import Tuple, List, Dict

gi.require_version('Gtk', '3.0')
gi.require_version('AppIndicator3', '0.1')
from gi.repository import Gtk, Gdk, AppIndicator3, GLib

try:
    import sys
    sys.path.append(str(Path.home() / '.local' / 'bin'))
    from ciadpi_whitelist import WhitelistManager
    WHITELIST_AVAILABLE = True
    print("‚úÖ –ú–æ–¥—É–ª—å –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω")
except ImportError as e:
    print(f"‚ùå –ú–æ–¥—É–ª—å –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    WHITELIST_AVAILABLE = False
    WhitelistManager = None    

# –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
DEBUG_LOG = Path.home() / '.config' / 'ciadpi' / 'indicator_debug.log'

def log_debug(message):
    """–ó–∞–ø–∏—Å—å –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
    with open(DEBUG_LOG, 'a', encoding='utf-8') as f:
        f.write(f"[{timestamp}] {message}\n")
    print(f"DEBUG: {message}")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
log_debug("=== Starting CIADPI Indicator ===")
log_debug(f"DISPLAY: {os.environ.get('DISPLAY')}")
log_debug(f"DBUS_SESSION_BUS_ADDRESS: {os.environ.get('DBUS_SESSION_BUS_ADDRESS')}")
log_debug(f"XAUTHORITY: {os.environ.get('XAUTHORITY')}")
log_debug(f"USER: {os.environ.get('USER')}")
log_debug(f"PWD: {os.environ.get('PWD', os.getcwd())}")

# –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
if not os.environ.get('DBUS_SESSION_BUS_ADDRESS'):
    dbus_path = f"/run/user/{os.getuid()}/bus"
    if os.path.exists(dbus_path):
        os.environ['DBUS_SESSION_BUS_ADDRESS'] = f"unix:path={dbus_path}"
        log_debug(f"Restored DBUS_SESSION_BUS_ADDRESS: {os.environ['DBUS_SESSION_BUS_ADDRESS']}")

if not os.environ.get('XAUTHORITY'):
    xauth_path = Path.home() / '.Xauthority'
    if xauth_path.exists():
        os.environ['XAUTHORITY'] = str(xauth_path)
        log_debug(f"Restored XAUTHORITY: {os.environ['XAUTHORITY']}")

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞
try:
    import sys
    sys.path.append(str(Path.home() / '.local' / 'bin'))
    from ciadpi_autosearch import CIAutoSearch
    AUTOSEARCH_AVAILABLE = True
except ImportError as e:
    print(f"–ú–æ–¥—É–ª—å –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    AUTOSEARCH_AVAILABLE = False
    CIAutoSearch = None

class AdvancedTrayIndicator:
    def __init__(self):
        log_debug("Initializing AdvancedTrayIndicator...")
        
        self.app = 'ciadpi_advanced_indicator'
        self.config_file = Path.home() / '.config' / 'ciadpi' / 'config.json'
        self.service_file = Path('/etc/systemd/system/ciadpi.service')
        self.default_params = "-o1 -o25+s -T3 -At o--tlsrec 1+s"
        self.current_params = self.load_config()
        self.whitelist_file = Path.home() / '.config' / 'ciadpi' / 'whitelist.json'
        self.whitelist = self.load_whitelist()

        # –£–ü–†–û–©–ï–ù–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò –ü–†–û–ö–°–ò
        self.original_system_proxy = None  # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –≤ —Å–∏—Å—Ç–µ–º–µ –î–û –Ω–∞—Å
        self.we_changed_proxy = False      # –§–ª–∞–≥ —á—Ç–æ –º—ã –º–µ–Ω—è–ª–∏ –ø—Ä–æ–∫—Å–∏

        if WHITELIST_AVAILABLE:
            self.whitelist_manager = WhitelistManager()
        else:
            self.whitelist_manager = None        

        # –û–î–ò–ù —Ç–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∫—Å–∏
        GLib.timeout_add(5000, self.check_current_proxy)

        self.autosearcher = None
        self.is_searching = False

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞
        # if AUTOSEARCH_AVAILABLE:
        #     self.autosearcher = CIAutoSearch()
        #     self.is_searching = False
        # else:
        #     self.autosearcher = None
        
        # –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞

        self.indicator = None
        GLib.timeout_add(2000, self.initialize_indicator)
        
        # –û–î–ò–ù —Ç–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
        GLib.timeout_add_seconds(3, self.update_status)
        
        # –û–î–ò–ù —Ç–∞–π–º–µ—Ä –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—à–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        GLib.timeout_add(3000, self.restore_our_proxy_on_startup)
        
        log_debug("AdvancedTrayIndicator initialization completed")            

    def initialize_indicator(self):
        """–û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞"""
        try:
            log_debug("Creating AppIndicator3...")
            
            self.indicator = AppIndicator3.Indicator.new(
                self.app, 
                "network-transmit-receive-symbolic",
                AppIndicator3.IndicatorCategory.APPLICATION_STATUS
            )
            
            self.indicator.set_status(AppIndicator3.IndicatorStatus.ACTIVE)
            self.indicator.set_menu(self.create_menu())
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
            self.update_tooltip()
            
            log_debug("AppIndicator3 created successfully")
            
        except Exception as e:
            log_debug(f"Error creating AppIndicator3: {e}")
            # Fallback –Ω–∞ Gtk.StatusIcon
            self.setup_fallback_indicator()
        
        return False  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä

    def setup_fallback_indicator(self):
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å Gtk.StatusIcon"""
        try:
            log_debug("Setting up Gtk.StatusIcon fallback...")
            self.status_icon = Gtk.StatusIcon()
            self.status_icon.set_from_icon_name("network-transmit-receive-symbolic")
            self.status_icon.set_tooltip_text("CIADPI Indicator")
            self.status_icon.connect("popup-menu", self.on_right_click)
            self.status_icon.connect("activate", self.on_left_click)
            self.status_icon.set_visible(True)
            log_debug("Gtk.StatusIcon setup completed")
        except Exception as e:
            log_debug(f"Error setting up Gtk.StatusIcon: {e}")

    def on_right_click(self, icon, button, time):
        """–ü—Ä–∞–≤—ã–π –∫–ª–∏–∫ –¥–ª—è Gtk.StatusIcon"""
        menu = self.create_menu()
        menu.show_all()
        menu.popup(None, None, None, None, button, time)

    def on_left_click(self, icon):
        """–õ–µ–≤—ã–π –∫–ª–∏–∫ –¥–ª—è Gtk.StatusIcon"""
        self.show_quick_status()

    def show_quick_status(self):
        """–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ –ª–µ–≤–æ–º—É –∫–ª–∏–∫—É"""
        try:
            result = subprocess.run(
                ['systemctl', 'is-active', 'ciadpi.service'],
                capture_output=True, text=True, timeout=2
            )
            status = "üü¢ –ó–∞–ø—É—â–µ–Ω" if result.stdout.strip() == 'active' else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            self.show_notification("–°—Ç–∞—Ç—É—Å CIADPI", status)
        except Exception as e:
            self.show_notification("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å: {e}")

    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        default_config = {
            "params": self.default_params,
            "proxy_enabled": False,
            "proxy_host": "127.0.0.1",
            "proxy_port": "1080",
            "current_params": self.default_params,
            "auto_disable_proxy": False,
            "we_changed_proxy": False
        }
        
        try:
            self.config_file.parent.mkdir(exist_ok=True)
            if self.config_file.exists():
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                    for key in default_config:
                        if key not in config:
                            config[key] = default_config[key]
                    
                    # –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –§–õ–ê–ì –ò–ó –ö–û–ù–§–ò–ì–ê
                    self.we_changed_proxy = config.get("we_changed_proxy", False)
                    print(f"üîç –ó–ê–ì–†–£–ñ–ï–ù –ö–û–ù–§–ò–ì: we_changed_proxy = {self.we_changed_proxy}")
                    return config
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
            
        return default_config

    def save_config(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª"""
        try:
            # –°–û–•–†–ê–ù–Ø–ï–ú –§–õ–ê–ì –í –ö–û–ù–§–ò–ì
            self.current_params["we_changed_proxy"] = self.we_changed_proxy
            
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(self.current_params, f, indent=2, ensure_ascii=False)
            
            print(f"üíæ –ö–û–ù–§–ò–ì –°–û–•–†–ê–ù–ï–ù: we_changed_proxy = {self.we_changed_proxy}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: {e}")

    def update_tooltip(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–π –ø–æ–¥—Å–∫–∞–∑–∫–∏"""
        if hasattr(self, 'indicator') and self.indicator:
            current_params = self.get_current_service_params()
            tooltip_text = f"CIADPI - {current_params}" if current_params else "CIADPI Indicator"
            self.indicator.set_title(tooltip_text)

    def get_current_service_params(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ systemd —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            result = subprocess.run(
                ['systemctl', 'show', 'ciadpi.service', '--property=ExecStart', '--no-pager'],
                capture_output=True, text=True, timeout=5
            )
            if result.returncode == 0:
                output = result.stdout.strip()
                if 'argv[]=' in output:
                    parts = output.split('argv[]=')
                    if len(parts) > 1:
                        args = parts[1].split(';')[0].split()
                        if len(args) > 1:
                            return ' '.join(args[1:])
            return self.default_params
        except:
            return self.default_params

    def update_service_params(self, new_params):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ systemd —Å–µ—Ä–≤–∏—Å–µ - –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {new_params}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
            username = os.environ.get('USER')
            home_dir = Path.home()
            byedpi_dir = home_dir / 'byedpi'
            ciadpi_binary = byedpi_dir / 'ciadpi'
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–∏–Ω–∞—Ä–Ω–∏–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not ciadpi_binary.exists():
                error_msg = f"–ë–∏–Ω–∞—Ä–Ω–∏–∫ ciadpi –Ω–µ –Ω–∞–π–¥–µ–Ω: {ciadpi_binary}"
                print(f"‚ùå {error_msg}")
                self.show_notification("–û—à–∏–±–∫–∞", error_msg)
                return False
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å
            print("‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å...")
            stop_result = subprocess.run(
                ['sudo', 'systemctl', 'stop', 'ciadpi.service'], 
                capture_output=True, text=True, timeout=10
            )
            
            if stop_result.returncode != 0:
                print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {stop_result.stderr}")
            
            time.sleep(2)
            
            # –£–¥–∞–ª—è–µ–º override –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å (–∏–∑–±–µ–≥–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤)
            override_dir = Path('/etc/systemd/system/ciadpi.service.d')
            if override_dir.exists():
                subprocess.run(['sudo', 'rm', '-rf', str(override_dir)], check=False)
                print("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ override –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è")
            
            # –°–æ–∑–¥–∞–µ–º service —Ñ–∞–π–ª —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –ø—É—Ç—è–º–∏
            service_content = f"""[Unit]
    Description=CIADPI DPI Bypass Service
    After=network.target
    Wants=network.target

    [Service]
    Type=simple
    User={username}
    WorkingDirectory={byedpi_dir}
    ExecStart={ciadpi_binary} {new_params}
    Restart=on-failure
    RestartSec=5
    TimeoutStartSec=30

    [Install]
    WantedBy=multi-user.target
    """
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_file = Path('/tmp/ciadpi_temp.service')
            with open(temp_file, 'w', encoding='utf-8') as f:
                f.write(service_content)
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Å –ø—Ä–∞–≤–∞–º–∏ root
            print("üìù –û–±–Ω–æ–≤–ª—è–µ–º service —Ñ–∞–π–ª...")
            copy_result = subprocess.run(
                ['sudo', 'cp', str(temp_file), '/etc/systemd/system/ciadpi.service'],
                capture_output=True, text=True, check=True
            )
            
            subprocess.run(['sudo', 'systemctl', 'daemon-reload'], check=True)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥
            self.current_params["current_params"] = new_params
            self.current_params["params"] = new_params
            self.save_config()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
            print("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å...")
            start_result = subprocess.run(
                ['sudo', 'systemctl', 'start', 'ciadpi.service'],
                capture_output=True, text=True, check=True
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            time.sleep(3)
            status_result = subprocess.run(
                ['systemctl', 'is-active', 'ciadpi.service'],
                capture_output=True, text=True
            )
            
            if status_result.stdout.strip() == 'active':
                print("‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                self.show_notification("–£—Å–ø–µ—Ö", "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω")
                return True
            else:
                # –ï—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                error_msg = "–°–µ—Ä–≤–∏—Å –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"
                print(f"‚ùå {error_msg}")
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                log_result = subprocess.run(
                    ['journalctl', '-u', 'ciadpi.service', '-n', '10', '--no-pager'],
                    capture_output=True, text=True
                )
                print("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞:")
                print(log_result.stdout)
                
                self.show_notification("–û—à–∏–±–∫–∞", f"{error_msg}\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏")
                return False
            
        except subprocess.CalledProcessError as e:
            error_msg = f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}\nStderr: {e.stderr}"
            print(f"‚ùå {error_msg}")
            self.show_notification("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–æ–º–∞–Ω–¥—É")
            return False
            
        except Exception as e:
            error_msg = f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}"
            print(f"‚ùå {error_msg}")
            self.show_notification("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {e}")
            return False
        
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–µ–ª—ã–º —Å–ø–∏—Å–∫–æ–º:
    def load_whitelist(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
        default_whitelist = {
            "enabled": False,
            "domains": [
                "localhost",
                "127.0.0.1",
                "192.168.1.1",
                "*.local"
            ],
            "ips": [
                "192.168.1.0/24",
                "10.0.0.0/8"
            ],
            "bypass_proxy": True,
            "bypass_dpi": False
        }
        
        try:
            self.whitelist_file.parent.mkdir(exist_ok=True)
            if self.whitelist_file.exists():
                with open(self.whitelist_file, 'r', encoding='utf-8') as f:
                    whitelist = json.load(f)
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –µ—Å—Ç—å
                    for key in default_whitelist:
                        if key not in whitelist:
                            whitelist[key] = default_whitelist[key]
                    return whitelist
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞: {e}")
            
        return default_whitelist

    def save_whitelist(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
        try:
            with open(self.whitelist_file, 'w', encoding='utf-8') as f:
                json.dump(self.whitelist, f, indent=2, ensure_ascii=False)
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞: {e}")
            return False

    def is_whitelisted(self, host):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ö–æ—Å—Ç –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ"""
        if not self.whitelist.get("enabled", False):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞
        if host in self.whitelist.get("domains", []):
            return True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –º–∞—Å–∫–µ –¥–æ–º–µ–Ω–∞
        for domain_pattern in self.whitelist.get("domains", []):
            if domain_pattern.startswith('*.'):
                pattern = domain_pattern[2:]
                if host.endswith(pattern) or host == pattern:
                    return True
        
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É IP –∏ CIDR –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        return False

    def show_whitelist_dialog(self, widget=None):
        ###
        print("DEBUG: show_whitelist_dialog called")
        try:        
            ###
            """–î–∏–∞–ª–æ–≥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–µ–ª—ã–º —Å–ø–∏—Å–∫–æ–º"""
            dialog = Gtk.Dialog(title="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–µ–ª—ã–º —Å–ø–∏—Å–∫–æ–º", flags=0)
            dialog.add_buttons(Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL,
                            Gtk.STOCK_OK, Gtk.ResponseType.OK)
            dialog.set_default_size(600, 500)

            content_area = dialog.get_content_area()
            
            box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=10)
            box.set_margin_top(10)
            box.set_margin_bottom(10)
            box.set_margin_start(10)
            box.set_margin_end(10)
            
            # –í–∫–ª—é—á–µ–Ω–∏–µ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞
            enable_check = Gtk.CheckButton(label="–í–∫–ª—é—á–∏—Ç—å –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫")
            enable_check.set_active(self.whitelist.get("enabled", False))
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
            exceptions_frame = Gtk.Frame(label="–ò—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è")
            exceptions_box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=5)
            exceptions_box.set_margin_top(5)
            exceptions_box.set_margin_bottom(5)
            exceptions_box.set_margin_start(5)
            exceptions_box.set_margin_end(5)
            
            bypass_proxy_check = Gtk.CheckButton(label="–ò—Å–∫–ª—é—á–∏—Ç—å –∏–∑ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è")
            bypass_proxy_check.set_active(self.whitelist.get("bypass_proxy", True))
            
            bypass_dpi_check = Gtk.CheckButton(label="–ò—Å–∫–ª—é—á–∏—Ç—å –∏–∑ DPI –æ–±—Ö–æ–¥–∞")
            bypass_dpi_check.set_active(self.whitelist.get("bypass_dpi", False))
            bypass_dpi_check.set_sensitive(False)  # –ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
            
            exceptions_box.pack_start(bypass_proxy_check, False, False, 0)
            exceptions_box.pack_start(bypass_dpi_check, False, False, 0)
            exceptions_frame.add(exceptions_box)
            
            # –î–æ–º–µ–Ω—ã
            domains_frame = Gtk.Frame(label="–î–æ–º–µ–Ω—ã –∏ —Ö–æ—Å—Ç—ã (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É)")
            domains_scroll = Gtk.ScrolledWindow()
            domains_scroll.set_min_content_height(150)
            
            domains_text_view = Gtk.TextView()
            domains_text_view.set_wrap_mode(Gtk.WrapMode.WORD)
            domains_buffer = domains_text_view.get_buffer()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–æ–º–µ–Ω—ã
            domains_text = "\n".join(self.whitelist.get("domains", []))
            domains_buffer.set_text(domains_text)
            
            domains_scroll.add(domains_text_view)
            domains_frame.add(domains_scroll)
            
            # IP-–∞–¥—Ä–µ—Å–∞
            ips_frame = Gtk.Frame(label="IP-–∞–¥—Ä–µ—Å–∞ –∏ —Å–µ—Ç–∏ CIDR (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É)")
            ips_scroll = Gtk.ScrolledWindow()
            ips_scroll.set_min_content_height(100)
            
            ips_text_view = Gtk.TextView()
            ips_text_view.set_wrap_mode(Gtk.WrapMode.WORD)
            ips_buffer = ips_text_view.get_buffer()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ IP
            ips_text = "\n".join(self.whitelist.get("ips", []))
            ips_buffer.set_text(ips_text)
            
            ips_scroll.add(ips_text_view)
            ips_frame.add(ips_scroll)
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            info_label = Gtk.Label()
            info_label.set_markup(
                "<small>–ü–æ–¥—Å–∫–∞–∑–∫–∏:\n"
                "‚Ä¢ <tt>example.com</tt> - —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ\n"
                "‚Ä¢ <tt>*.example.com</tt> - –≤—Å–µ –ø–æ–¥–¥–æ–º–µ–Ω—ã\n" 
                "‚Ä¢ <tt>192.168.1.0/24</tt> - –ø–æ–¥—Å–µ—Ç—å CIDR\n"
                "‚Ä¢ <tt>localhost</tt>, <tt>127.0.0.1</tt> - –ª–æ–∫–∞–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞</small>"
            )
            info_label.set_sensitive(False)
            
            box.pack_start(enable_check, False, False, 0)
            box.pack_start(exceptions_frame, False, False, 0)
            box.pack_start(domains_frame, True, True, 0)
            box.pack_start(ips_frame, True, True, 0)
            box.pack_start(info_label, False, False, 0)
            
            content_area.pack_start(box, True, True, 0)
            content_area.show_all()
            
            response = dialog.run()
            
            if response == Gtk.ResponseType.OK:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                self.whitelist["enabled"] = enable_check.get_active()
                self.whitelist["bypass_proxy"] = bypass_proxy_check.get_active()
                self.whitelist["bypass_dpi"] = bypass_dpi_check.get_active()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–º–µ–Ω—ã
                domains_start, domains_end = domains_buffer.get_bounds()
                domains_text = domains_buffer.get_text(domains_start, domains_end, True)
                self.whitelist["domains"] = [
                    domain.strip() for domain in domains_text.split('\n') 
                    if domain.strip()
                ]
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º IP
                ips_start, ips_end = ips_buffer.get_bounds()
                ips_text = ips_buffer.get_text(ips_start, ips_end, True)
                self.whitelist["ips"] = [
                    ip.strip() for ip in ips_text.split('\n') 
                    if ip.strip()
                ]
                
                if self.save_whitelist():
                    self.show_notification("–ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
                    
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –≤–∫–ª—é—á–µ–Ω
                    if self.whitelist["enabled"] and self.whitelist["bypass_proxy"]:
                        self.apply_whitelist_proxy_settings()
                else:
                    self.show_notification("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫")
###
        except Exception as e:
            print(f"ERROR in show_whitelist_dialog: {e}")
            import traceback
            traceback.print_exc()
###
        dialog.destroy()

    def apply_whitelist_proxy_settings(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏ —Å —É—á–µ—Ç–æ–º –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
        if not self.whitelist.get("enabled", False) or not self.whitelist.get("bypass_proxy", True):
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
            current_settings = self.get_system_proxy_settings()
            
            if current_settings.get('mode') == 'manual':
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –∏—Å–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–∫—Å–∏
                ignore_hosts = self.whitelist.get("domains", []) + self.whitelist.get("ips", [])
                
                if ignore_hosts:
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ —Ö–æ—Å—Ç—ã
                    ignore_string = ",".join(ignore_hosts)
                    subprocess.run([
                        'gsettings', 'set', 'org.gnome.system.proxy', 'ignore-hosts', 
                        f"['{ignore_string}']"
                    ], check=False)
                    
                    log_debug(f"–ü—Ä–∏–º–µ–Ω–µ–Ω –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏: {ignore_string}")
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–∫—Å–∏: {e}")

    def get_proxy_env_with_whitelist(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–∫—Å–∏ —Å —É—á–µ—Ç–æ–º –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
        env_vars = {}
        
        if (self.current_params.get("proxy_enabled", False) and 
            self.current_params.get("proxy_mode") == 'manual' and
            not self.whitelist.get("enabled", False)):
            
            host = self.current_params.get("proxy_host", "127.0.0.1")
            port = self.current_params.get("proxy_port", "1080")
            
            if host:  # –ï—Å–ª–∏ —Ö–æ—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π
                proxy_url = f"http://{host}:{port}"
            else:
                proxy_url = f"http://:{port}"  # –§–æ—Ä–º–∞—Ç —Å –ø—É—Å—Ç—ã–º —Ö–æ—Å—Ç–æ–º
                
            env_vars = {
                'http_proxy': proxy_url,
                'https_proxy': proxy_url,
                'ftp_proxy': proxy_url,
                'HTTP_PROXY': proxy_url,
                'HTTPS_PROXY': proxy_url,
                'FTP_PROXY': proxy_url,
                'no_proxy': ','.join(self.whitelist.get("domains", []) + self.whitelist.get("ips", [])),
                'NO_PROXY': ','.join(self.whitelist.get("domains", []) + self.whitelist.get("ips", []))
            }
        
        return env_vars      

    # –ú–ï–¢–û–î –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏
    def disable_system_proxy(self):
        """–ü–æ–ª–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            print("üîå –û—Ç–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–∫—Å–∏...")
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            success = self.restore_system_proxy_backup()
            
            if success:
                self.we_changed_proxy = False
                self.show_notification("–ü—Ä–æ–∫—Å–∏", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            else:
                # Fallback: –ø—Ä–æ—Å—Ç–æ –æ—Ç–∫–ª—é—á–∞–µ–º –µ—Å–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
                subprocess.run([
                    'gsettings', 'set', 'org.gnome.system.proxy', 'mode', 'none'
                ], check=False)
                self.show_notification("–ü—Ä–æ–∫—Å–∏", "–ü—Ä–æ–∫—Å–∏ –æ—Ç–∫–ª—é—á–µ–Ω")
                
            return success
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏: {e}")
            return False

    def create_menu(self):
        menu = Gtk.Menu()
        
        # –°—Ç–∞—Ç—É—Å
        self.status_item = Gtk.MenuItem(label="üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞...")
        menu.append(self.status_item)
        
        menu.append(Gtk.SeparatorMenuItem())
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–º
        start_item = Gtk.MenuItem(label="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å")
        start_item.connect("activate", self.start_service)
        menu.append(start_item)
        
        stop_item = Gtk.MenuItem(label="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å")
        stop_item.connect("activate", self.stop_service)
        menu.append(stop_item)
        
        restart_item = Gtk.MenuItem(label="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å")
        restart_item.connect("activate", self.restart_service)
        menu.append(restart_item)
        
        menu.append(Gtk.SeparatorMenuItem())
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_item = Gtk.MenuItem(label="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        settings_item.connect("activate", self.show_settings)
        menu.append(settings_item)
        
        proxy_item = Gtk.MenuItem(label="üîå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏")
        proxy_item.connect("activate", self.show_proxy_settings)
        menu.append(proxy_item)

        # –ë–ï–õ–´–ô –°–ü–ò–°–û–ö
        whitelist_item = Gtk.MenuItem(label="üìù –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫")
        whitelist_item.connect("activate", self.show_whitelist_dialog)
        menu.append(whitelist_item)        
        
        menu.append(Gtk.SeparatorMenuItem())
        
        # –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –∏ –∏—Å—Ç–æ—Ä–∏—è
        if self.autosearcher:
            autosearch_item = Gtk.MenuItem(label="üîç –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
            autosearch_item.connect("activate", self.show_autosearch_dialog)
            menu.append(autosearch_item)
            
            history_item = Gtk.MenuItem(label="üìä –ò—Å—Ç–æ—Ä–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            history_item.connect("activate", self.show_history)
            menu.append(history_item)
            
            menu.append(Gtk.SeparatorMenuItem())
        
        # –õ–æ–≥–∏
        logs_item = Gtk.MenuItem(label="üìã –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏")
        logs_item.connect("activate", self.show_logs)
        menu.append(logs_item)
        
        menu.append(Gtk.SeparatorMenuItem())
        
        # –°–ø—Ä–∞–≤–∫–∞
        help_item = Gtk.MenuItem(label="‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º")
        help_item.connect("activate", self.show_help)
        menu.append(help_item)
        
        about_item = Gtk.MenuItem(label="‚ÑπÔ∏è –û –ø—Ä–æ–≥—Ä–∞–º–º–µ")
        about_item.connect("activate", self.show_about)
        menu.append(about_item)
        
        menu.append(Gtk.SeparatorMenuItem())
        
        # –í—ã—Ö–æ–¥
        exit_item = Gtk.MenuItem(label="üö™ –í—ã—Ö–æ–¥")
        exit_item.connect("activate", self.exit_app)
        menu.append(exit_item)
        
        menu.show_all()
        return menu

    def update_status(self):
        try:
            result = subprocess.run(
                ['systemctl', 'is-active', 'ciadpi.service'],
                capture_output=True, text=True, timeout=2
            )
            status = result.stdout.strip()
            
            current_params = self.get_current_service_params()
            status_text = "–ó–∞–ø—É—â–µ–Ω" if status == 'active' else "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            
            if hasattr(self, 'indicator') and self.indicator:
                if status == 'active':
                    self.indicator.set_icon_full("network-transmit-receive-symbolic", "CIADPI –∑–∞–ø—É—â–µ–Ω")
                    self.status_item.set_label(f"‚úÖ CIADPI {status_text}")
                else:
                    self.indicator.set_icon_full("network-offline-symbolic", "CIADPI –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    self.status_item.set_label(f"‚ùå CIADPI {status_text}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
                self.update_tooltip()
            elif hasattr(self, 'status_icon'):
                # –î–ª—è Gtk.StatusIcon
                if status == 'active':
                    self.status_icon.set_from_icon_name("network-transmit-receive-symbolic")
                    self.status_icon.set_tooltip_text(f"CIADPI {status_text}")
                else:
                    self.status_icon.set_from_icon_name("network-offline-symbolic")
                    self.status_icon.set_tooltip_text(f"CIADPI {status_text}")
                
        except Exception as e:
            if hasattr(self, 'status_item'):
                self.status_item.set_label("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞")
            
        return True
    
    def sync_proxy_settings(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏ —Å —Å–∏—Å—Ç–µ–º–æ–π"""
        try:
            current_system = self.get_system_proxy_settings()
            current_config = self.current_params
            
            # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è, –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ
            if (current_config.get("proxy_mode") != current_system.get('mode') or
                current_config.get("proxy_host") != current_system.get('http_host')):
                
                print("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏...")
                self.current_params["proxy_mode"] = current_system.get('mode', 'none')
                self.current_params["proxy_enabled"] = current_system.get('mode') != 'none'
                self.current_params["proxy_host"] = current_system.get('http_host', '127.0.0.1')
                self.current_params["proxy_port"] = current_system.get('http_port', '1080')
                self.save_config()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏: {e}")
        
        return False  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä    
    

    def show_proxy_settings(self, widget):
        """–î–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏"""
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        current_settings = self.get_system_proxy_settings()
        
        dialog = Gtk.Dialog(title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏", flags=0)
        dialog.add_buttons(Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL,
                        Gtk.STOCK_OK, Gtk.ResponseType.OK)
        dialog.set_default_size(500, 350)

        content_area = dialog.get_content_area()
        
        box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=10)
        box.set_margin_top(10)
        box.set_margin_bottom(10)
        box.set_margin_start(10)
        box.set_margin_end(10)
        
        # –†–µ–∂–∏–º –ø—Ä–æ–∫—Å–∏
        mode_label = Gtk.Label(label="–†–µ–∂–∏–º –ø—Ä–æ–∫—Å–∏:")
        mode_combo = Gtk.ComboBoxText()
        mode_combo.append_text("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π (PAC)")
        mode_combo.append_text("–†—É—á–Ω–æ–π") 
        mode_combo.append_text("–í—ã–∫–ª—é—á–µ–Ω")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º
        current_mode = current_settings.get('mode', 'none')
        if current_mode == 'auto':
            mode_combo.set_active(0)
        elif current_mode == 'manual':
            mode_combo.set_active(1)
        else:
            mode_combo.set_active(2)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä—É—á–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏
        manual_frame = Gtk.Frame(label="–†—É—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏")
        manual_box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=5)
        manual_box.set_margin_top(5)
        manual_box.set_margin_bottom(5)
        manual_box.set_margin_start(5)
        manual_box.set_margin_end(5)
        
        # –•–æ—Å—Ç
        host_label = Gtk.Label(label="–•–æ—Å—Ç –ø—Ä–æ–∫—Å–∏ (–æ—Å—Ç–∞–≤—å—Ç–µ –ü–£–°–¢–´–ú –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø–æ—Ä—Ç–∞):")
        host_entry = Gtk.Entry()
        host_entry.set_placeholder_text("–ü–£–°–¢–û–ï –∑–Ω–∞—á–µ–Ω–∏–µ - —Ç–æ–ª—å–∫–æ –ø–æ—Ä—Ç")
        current_host = current_settings.get('http_host', '')
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º–µ–Ω–Ω–æ —Ç–æ, —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π)
        host_entry.set_text(current_host)
        
        # –ü–æ—Ä—Ç
        port_label = Gtk.Label(label="–ü–æ—Ä—Ç –ø—Ä–æ–∫—Å–∏:")
        port_entry = Gtk.Entry()
        port_entry.set_text(current_settings.get('http_port', '1080'))
        
        # –ü—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ä–º–∞—Ç–æ–≤
        examples_label = Gtk.Label(label="–í–∞–∂–Ω–æ:\n‚Ä¢ –ü—É—Å—Ç–æ–µ –ø–æ–ª–µ —Ö–æ—Å—Ç–∞ = —Ç–æ–ª—å–∫–æ –ø–æ—Ä—Ç\n‚Ä¢ 127.0.0.1 = —Ö–æ—Å—Ç + –ø–æ—Ä—Ç")
        examples_label.set_sensitive(False)
        
        manual_box.pack_start(host_label, False, False, 0)
        manual_box.pack_start(host_entry, False, False, 0)
        manual_box.pack_start(port_label, False, False, 0)
        manual_box.pack_start(port_entry, False, False, 0)
        manual_box.pack_start(examples_label, False, False, 0)
        manual_frame.add(manual_box)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_label = Gtk.Label(label="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –∫–æ –≤—Å–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º")
        info_label.set_sensitive(False)
        
        # –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        current_host_display = "–ü–£–°–¢–û–ô (—Ç–æ–ª—å–∫–æ –ø–æ—Ä—Ç)" if not current_settings.get('http_host') else current_settings.get('http_host')
        current_port_display = current_settings.get('http_port', '–Ω–µ —É–∫–∞–∑–∞–Ω')
        status_label = Gtk.Label(label=f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {current_settings.get('mode', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n–•–æ—Å—Ç: {current_host_display}, –ü–æ—Ä—Ç: {current_port_display}")
        status_label.set_sensitive(False)

        # –ß–ï–ö–ë–û–ö–° –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏
        auto_disable_check = Gtk.CheckButton(label="‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–∞—Ç—å –ø—Ä–æ–∫—Å–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ")
        auto_disable_check.set_active(self.current_params.get("auto_disable_proxy", False))
        auto_disable_check.set_tooltip_text("–ü—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ–∫—Å–∏ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
                
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ UI
        box.pack_start(auto_disable_check, False, False, 0)                
        box.pack_start(mode_label, False, False, 0)
        box.pack_start(mode_combo, False, False, 0)
        box.pack_start(manual_frame, False, False, 0)
        box.pack_start(status_label, False, False, 0)
        box.pack_start(info_label, False, False, 0)
        
        content_area.pack_start(box, True, True, 0)
        content_area.show_all()
        
        response = dialog.run()
        
        if response == Gtk.ResponseType.OK:
            mode_index = mode_combo.get_active()
            modes = ['auto', 'manual', 'none']
            selected_mode = modes[mode_index] if mode_index >= 0 else 'none'
            
            proxy_host = host_entry.get_text().strip()
            proxy_port = port_entry.get_text().strip()
            
            if not proxy_port.isdigit():
                self.show_notification("–û—à–∏–±–∫–∞", "–ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                dialog.destroy()
                return
            
            self.current_params["auto_disable_proxy"] = auto_disable_check.get_active()
            print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º auto_disable_proxy = {self.current_params['auto_disable_proxy']}")            
            
            # –°–û–•–†–ê–ù–Ø–ï–ú –ù–ê–®–ò –ù–ê–°–¢–†–û–ô–ö–ò –í –ö–û–ù–§–ò–ì
            self.current_params["proxy_enabled"] = selected_mode != 'none'
            self.current_params["proxy_host"] = proxy_host
            self.current_params["proxy_port"] = proxy_port
            self.current_params["proxy_mode"] = selected_mode
            
            # ‚≠ê –û–ë–ù–û–í–õ–Ø–ï–ú –ò –°–û–•–†–ê–ù–Ø–ï–ú –§–õ–ê–ì
            if selected_mode == 'manual' and not self.we_changed_proxy:
                self.we_changed_proxy = True
            elif selected_mode == 'none' and self.we_changed_proxy:
                self.we_changed_proxy = False
                
            self.current_params["we_changed_proxy"] = self.we_changed_proxy
            self.save_config()
            
            # –ï–°–õ–ò –ú–´ –í–ö–õ–Æ–ß–ê–ï–ú –ü–†–û–ö–°–ò - –°–û–•–†–ê–ù–Ø–ï–ú –°–ò–°–¢–ï–ú–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò
            if selected_mode == 'manual' and not self.we_changed_proxy:
                self.save_system_proxy_backup()
                self.we_changed_proxy = True
                self.save_config()  # ‚≠ê –°–û–•–†–ê–ù–Ø–ï–ú –ö–û–ù–§–ò–ì –° –§–õ–ê–ì–û–ú
            
            # –ï–°–õ–ò –ú–´ –í–´–ö–õ–Æ–ß–ê–ï–ú –ü–†–û–ö–°–ò - –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –°–ò–°–¢–ï–ú–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò
            elif selected_mode == 'none' and self.we_changed_proxy:
                self.restore_system_proxy_backup()
                self.we_changed_proxy = False
                self.save_config()  # ‚≠ê –°–û–•–†–ê–ù–Ø–ï–ú –ö–û–ù–§–ò–ì –° –§–õ–ê–ì–û–ú
            else:
                # –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                success = self.apply_system_proxy(selected_mode, proxy_host, proxy_port)
            
            display_host = "–ü–£–°–¢–û–ô" if not proxy_host else proxy_host
            self.show_notification("–ü—Ä–æ–∫—Å–∏", f"–ü—Ä–æ–∫—Å–∏ {selected_mode} –ø—Ä–∏–º–µ–Ω–µ–Ω")
        
        dialog.destroy()

    def get_system_proxy_settings(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏"""
        settings = {
            'mode': 'none',
            'http_host': '',
            'http_port': '8080',  # –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø–æ—Ä—Ç
            'ignore_hosts': '[]'
        }
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∂–∏–º –ø—Ä–æ–∫—Å–∏
            result = subprocess.run([
                'gsettings', 'get', 'org.gnome.system.proxy', 'mode'
            ], capture_output=True, text=True, check=False)
            
            if result.returncode == 0:
                mode = result.stdout.strip().strip("'")
                settings['mode'] = mode
                
                if mode == 'manual':
                    # –ü–æ–ª—É—á–∞–µ–º HTTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    host_result = subprocess.run([
                        'gsettings', 'get', 'org.gnome.system.proxy.http', 'host'
                    ], capture_output=True, text=True, check=False)
                    port_result = subprocess.run([
                        'gsettings', 'get', 'org.gnome.system.proxy.http', 'port'
                    ], capture_output=True, text=True, check=False)
                    
                    if host_result.returncode == 0:
                        settings['http_host'] = host_result.stdout.strip().strip("'")
                    if port_result.returncode == 0:
                        settings['http_port'] = port_result.stdout.strip()
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ —Ö–æ—Å—Ç—ã
                    ignore_result = subprocess.run([
                        'gsettings', 'get', 'org.gnome.system.proxy', 'ignore-hosts'
                    ], capture_output=True, text=True, check=False)
                    
                    if ignore_result.returncode == 0:
                        settings['ignore_hosts'] = ignore_result.stdout.strip()
                        
            elif mode == 'auto':
                # –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞ –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å PAC URL
                pac_result = subprocess.run([
                    'gsettings', 'get', 'org.gnome.system.proxy', 'autoconfig-url'
                ], capture_output=True, text=True, check=False)
                
                if pac_result.returncode == 0:
                    settings['pac_url'] = pac_result.stdout.strip().strip("'")
                            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏: {e}")
        
        return settings

    def apply_system_proxy(self, mode, host, port):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ NetworkManager"""
        try:
            # –¢–æ–ª—å–∫–æ –ø—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–¥–µ—Å—å
            # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–∫—Å–∏
            
            subprocess.run([
                'gsettings', 'set', 'org.gnome.system.proxy', 'mode', mode
            ], check=False)
            
            if mode == 'manual':
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ü–£–°–¢–û–ï –∑–Ω–∞—á–µ–Ω–∏–µ –µ—Å–ª–∏ host –ø—É—Å—Ç–æ–π
                effective_host = host  # –ú–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π!
                
                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º HTTP
                subprocess.run([
                    'gsettings', 'set', 'org.gnome.system.proxy.http', 'host', effective_host
                ], check=False)
                subprocess.run([
                    'gsettings', 'set', 'org.gnome.system.proxy.http', 'port', port
                ], check=False)
                
                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º HTTPS
                subprocess.run([
                    'gsettings', 'set', 'org.gnome.system.proxy.https', 'host', effective_host
                ], check=False)
                subprocess.run([
                    'gsettings', 'set', 'org.gnome.system.proxy.https', 'port', port
                ], check=False)
                
                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º FTP
                subprocess.run([
                    'gsettings', 'set', 'org.gnome.system.proxy.ftp', 'host', effective_host
                ], check=False)
                subprocess.run([
                    'gsettings', 'set', 'org.gnome.system.proxy.ftp', 'port', port
                ], check=False)
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
                subprocess.run([
                    'gsettings', 'set', 'org.gnome.system.proxy', 'use-same-proxy', 'true'
                ], check=False)
                
            elif mode == 'auto':
                # –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞ –æ–±—ã—á–Ω–æ –Ω—É–∂–µ–Ω PAC URL
                pass

            # –ü–†–ò–ú–ï–ù–Ø–ï–ú –ë–ï–õ–´–ô –°–ü–ò–°–û–ö –î–õ–Ø –ò–ì–ù–û–†–ò–†–£–ï–ú–´–• –•–û–°–¢–û–í
            if self.whitelist.get("enabled", False) and self.whitelist.get("bypass_proxy", True):
                ignore_hosts = self.whitelist.get("domains", []) + self.whitelist.get("ips", [])
                if ignore_hosts:
                    ignore_string = "[" + ",".join([f"'{host}'" for host in ignore_hosts]) + "]"
                    subprocess.run([
                        'gsettings', 'set', 'org.gnome.system.proxy', 'ignore-hosts', 
                        ignore_string
                    ], check=False)
                    print(f"‚úÖ –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω: {len(ignore_hosts)} –∑–∞–ø–∏—Å–µ–π")
            else:
                # –û—á–∏—â–∞–µ–º –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ —Ö–æ—Å—Ç—ã –µ—Å–ª–∏ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –≤—ã–∫–ª—é—á–µ–Ω
                subprocess.run([
                    'gsettings', 'reset', 'org.gnome.system.proxy', 'ignore-hosts'
                ], check=False)            
                
            host_display = "–ü–£–°–¢–û–ô" if not host else host
            print(f"‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–∫—Å–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {mode} –•–æ—Å—Ç: {host_display} –ü–æ—Ä—Ç: {port}")
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            self.apply_environment_proxy(mode, host, port)
            
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º NetworkManager –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
            self.restart_network_services()
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏: {e}")
            return False
    
    def apply_environment_proxy(self, mode, host, port):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        try:
            if mode == 'manual':
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –ø—Ä–æ–∫—Å–∏ - –µ—Å–ª–∏ —Ö–æ—Å—Ç –ü–£–°–¢–û–ô, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Ä—Ç
                if host:
                    proxy_url = f"http://{host}:{port}"
                else:
                    # –ü–£–°–¢–û–ô —Ö–æ—Å—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Ä—Ç (–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Ç–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç)
                    proxy_url = f"http://:{port}"  # –§–æ—Ä–º–∞—Ç —Å –ø—É—Å—Ç—ã–º —Ö–æ—Å—Ç–æ–º
                
                # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (–¥–ª—è –Ω–æ–≤—ã—Ö —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤)
                env_file = Path.home() / '.proxy_env'
                with open(env_file, 'w') as f:
                    f.write(f"""export http_proxy={proxy_url}
    export https_proxy={proxy_url}
    export ftp_proxy={proxy_url}
    export HTTP_PROXY={proxy_url}
    export HTTPS_PROXY={proxy_url}
    export FTP_PROXY={proxy_url}
    """)
                print(f"‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {proxy_url}")
            else:
                # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
                env_file = Path.home() / '.proxy_env'
                if env_file.exists():
                    env_file.unlink()
                print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã")
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")

    def restart_network_services(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ç–µ–≤—ã—Ö —Å–ª—É–∂–± –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º NetworkManager
            subprocess.run(['sudo', 'systemctl', 'restart', 'NetworkManager'], 
                          check=False, timeout=10)
            print("‚úÖ NetworkManager –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
            
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º systemd-resolved –¥–ª—è DNS
            subprocess.run(['sudo', 'systemctl', 'restart', 'systemd-resolved'], 
                          check=False, timeout=5)
            print("‚úÖ systemd-resolved –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö —Å–ª—É–∂–±: {e}")

    def get_proxy_env(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–∫—Å–∏"""
        if self.current_params.get("proxy_enabled", False) and self.current_params.get("proxy_mode") == 'manual':
            host = self.current_params.get("proxy_host", "127.0.0.1")
            port = self.current_params.get("proxy_port", "1080")
            return {
                'http_proxy': f"http://{host}:{port}",
                'https_proxy': f"http://{host}:{port}",
                'HTTP_PROXY': f"http://{host}:{port}",
                'HTTPS_PROXY': f"http://{host}:{port}"
            }
        return {}

    def check_current_proxy(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–∏—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ GNOME
            result = subprocess.run([
                'gsettings', 'get', 'org.gnome.system.proxy', 'mode'
            ], capture_output=True, text=True, check=False)
            
            if result.returncode == 0:
                mode = result.stdout.strip().strip("'")
                if mode == 'manual':
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ HTTP –ø—Ä–æ–∫—Å–∏
                    host_result = subprocess.run([
                        'gsettings', 'get', 'org.gnome.system.proxy.http', 'host'
                    ], capture_output=True, text=True, check=False)
                    port_result = subprocess.run([
                        'gsettings', 'get', 'org.gnome.system.proxy.http', 'port'
                    ], capture_output=True, text=True, check=False)
                    
                    host = host_result.stdout.strip().strip("'")
                    port = port_result.stdout.strip()
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥
                    self.current_params["proxy_enabled"] = True
                    self.current_params["proxy_host"] = host
                    self.current_params["proxy_port"] = port
                    self.save_config()
                    
                    print(f"üì° –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏: {host}:{port}")
                else:
                    self.current_params["proxy_enabled"] = False
                    self.save_config()
                    print("üì° –ü—Ä–æ–∫—Å–∏ –æ—Ç–∫–ª—é—á–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏: {e}")

    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    def restore_original_environment(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        try:
            # –£–¥–∞–ª—è–µ–º –Ω–∞—à —Ñ–∞–π–ª —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–æ–∫—Å–∏
            env_file = Path.home() / '.proxy_env'
            if env_file.exists():
                env_file.unlink()
                print("‚úÖ –£–¥–∞–ª–µ–Ω—ã –Ω–∞—à–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏")
                
            # TODO: –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            # –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")       

    # –ß–µ—Ç–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    def save_system_proxy_backup(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é"""
        self.original_system_proxy = self.get_system_proxy_settings()
        print("üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏:")
        print(f"   –†–µ–∂–∏–º: {self.original_system_proxy.get('mode')}")
        print(f"   –•–æ—Å—Ç: {self.original_system_proxy.get('http_host')}")
        print(f"   –ü–æ—Ä—Ç: {self.original_system_proxy.get('http_port')}")

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—à–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    def save_our_proxy_settings(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞"""
        self.our_proxy_settings = {
            'mode': self.current_params.get("proxy_mode", "none"),
            'host': self.current_params.get("proxy_host", ""),
            'port': self.current_params.get("proxy_port", "1080"),
            'enabled': self.current_params.get("proxy_enabled", False)
        }
        print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")

    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—à–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    def restore_our_proxy_on_startup(self):
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞
            result = subprocess.run(
                ['systemctl', 'is-active', 'ciadpi.service'],
                capture_output=True, text=True, timeout=2
            )
            service_running = result.stdout.strip() == 'active'
            
            # –ï—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω –ò —É –Ω–∞—Å –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
            if (service_running and 
                self.current_params.get("proxy_enabled", False) and 
                self.current_params.get("proxy_mode") == 'manual'):
                
                print("üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ...")
                print(f"üîç –§–ª–∞–≥ we_changed_proxy: {self.we_changed_proxy}")
                
                # ‚≠ê –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –§–õ–ê–ì –ï–°–õ–ò –û–ù –ë–´–õ –£–°–¢–ê–ù–û–í–õ–ï–ù
                if not self.we_changed_proxy:
                    self.we_changed_proxy = True
                    self.save_config()
                    print("üíæ –§–ª–∞–≥ we_changed_proxy –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
                
                host = self.current_params.get("proxy_host", "")
                port = self.current_params.get("proxy_port", "1080")
                
                success = self.apply_system_proxy('manual', host, port)
                
                if success:
                    print("‚úÖ –ù–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")
                    
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        
        return False  

    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    def restore_system_proxy_backup(self):
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        try:
            if not self.original_system_proxy:
                print("‚ÑπÔ∏è –ù–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫")
                return True
                
            original_mode = self.original_system_proxy.get('mode', 'none')
            original_host = self.original_system_proxy.get('http_host', '')
            original_port = self.original_system_proxy.get('http_port', '1080')
            
            print("üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏...")
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            success = self.apply_system_proxy(original_mode, original_host, original_port)
            
            if success:
                print("‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
                self.restore_original_environment()
            return success
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            return False                  

    def run_command(self, command):
        def run_in_thread():
            try:
                env = os.environ.copy()
                proxy_env = self.get_proxy_env()
                env.update(proxy_env)
                
                result = subprocess.run(
                    ['sudo'] + command.split(),
                    capture_output=True, text=True, timeout=10,
                    env=env
                )
                if result.returncode == 0:
                    self.show_notification("–£—Å–ø–µ—Ö", "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                else:
                    self.show_notification("–û—à–∏–±–∫–∞", result.stderr)
                time.sleep(1)
                self.update_status()
            except Exception as e:
                self.show_notification("–û—à–∏–±–∫–∞", str(e))
        
        threading.Thread(target=run_in_thread, daemon=True).start()

    def start_service(self, widget):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –Ω–∞—à–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        def start_with_proxy_restore():
            try:
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
                result = subprocess.run(
                    ['sudo', 'systemctl', 'start', 'ciadpi.service'],
                    capture_output=True, text=True, timeout=10
                )
                
                if result.returncode == 0:
                    # –ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ù–ê–®–ò –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    time.sleep(2)
                    
                    if (self.current_params.get("proxy_enabled", False) and 
                        self.current_params.get("proxy_mode") == 'manual'):
                        
                        # –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –§–õ–ê–ì –µ—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
                        if not self.we_changed_proxy:
                            self.save_system_proxy_backup()
                            self.we_changed_proxy = True
                            self.save_config()  # ‚≠ê –°–û–•–†–ê–ù–Ø–ï–ú –ö–û–ù–§–ò–ì –° –§–õ–ê–ì–û–ú
                            print("üíæ –§–ª–∞–≥ we_changed_proxy —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥")
                        
                        host = self.current_params.get("proxy_host", "")
                        port = self.current_params.get("proxy_port", "1080")
                        self.apply_system_proxy('manual', host, port)
                        self.show_notification("–°–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω", "–ù–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
                    else:
                        self.show_notification("–°–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω", "–°–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                        
                else:
                    self.show_notification("–û—à–∏–±–∫–∞", result.stderr)
                    
                time.sleep(1)
                self.update_status()
                
            except Exception as e:
                self.show_notification("–û—à–∏–±–∫–∞", str(e))
        
        threading.Thread(target=start_with_proxy_restore, daemon=True).start()

    def stop_service(self, widget):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ–∫—Å–∏"""
        if self.current_params.get("auto_disable_proxy", False) and self.we_changed_proxy:
            # –ê–≤—Ç–æ–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ –ò –º—ã –º–µ–Ω—è–ª–∏ –ø—Ä–æ–∫—Å–∏
            def stop_with_proxy_restore():
                try:
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    self.restore_system_proxy_backup()
                    
                    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å
                    result = subprocess.run(
                        ['sudo', 'systemctl', 'stop', 'ciadpi.service'],
                        capture_output=True, text=True, timeout=10
                    )
                    
                    if result.returncode == 0:
                        self.show_notification("–°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "–°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                    else:
                        self.show_notification("–û—à–∏–±–∫–∞", result.stderr)
                        
                    time.sleep(1)
                    self.update_status()
                    
                except Exception as e:
                    self.show_notification("–û—à–∏–±–∫–∞", str(e))
            
            threading.Thread(target=stop_with_proxy_restore, daemon=True).start()
        else:
            # –û–±—ã—á–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏
            self.run_command("systemctl stop ciadpi.service")

    def restart_service(self, widget):
        self.run_command("systemctl restart ciadpi.service")

    def validate_params(self, params: str) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ciadpi —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –æ–± –æ—à–∏–±–∫–∞—Ö"""
        if not params.strip():
            return True, ""
        
        # –í—Å–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        valid_params = {
            # –û—Å–Ω–æ–≤–Ω—ã–µ
            '-i', '-p', '-D', '-w', '-E', '-c', '-I', '-b', '-g', '-N', '-U', '-F',
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º  
            '-A', '-L', '-u', '-y', '-T',
            # –ü—Ä–æ—Ç–æ–∫–æ–ª—ã
            '-K',
            # –û–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª–∏
            '-H', '-j', '-V', '-R',
            # –ú–µ—Ç–æ–¥—ã –æ–±—Ö–æ–¥–∞
            '-s', '-d', '-o', '-q', '-f', '-r',
            # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
            '-t', '-S', '-O', '-l', '-e', '-n', '-Q', '-M', '-a', '-Y'
        }
        
        # –ú–µ—Ç–æ–¥—ã –æ–±—Ö–æ–¥–∞ (-o1 –¥–æ -o25)
        obfuscation_methods = {f'-o{i}' for i in range(1, 26)}
        valid_params.update(obfuscation_methods)
        
        parts = params.split()
        unknown_params = []
        
        i = 0
        while i < len(parts):
            part = parts[i]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if part in valid_params:
                i += 1
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã –æ–±—Ö–æ–¥–∞ —Å —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏ (-o1+s, -o25+m –∏ —Ç.–¥.)
            if re.match(r'^-o\d+[\+sme]*$', part):
                i += 1
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã (1+s, 2+s, o--tlsrec)
            if part in ['1+s', '2+s', '3+s', '-At', 'o--tlsrec']:
                i += 1
                continue
                
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —á–∞—Å—Ç—å)
            if part in ['-i', '-p', '-w', '-c', '-I', '-b', '-g', '-u', '-T', 
                    '-A', '-L', '-K', '-H', '-j', '-V', '-R', '-s', '-d', 
                    '-o', '-q', '-f', '-r', '-t', '-O', '-l', '-e', '-n', '-a']:
                if i + 1 < len(parts):
                    i += 2  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –∏ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ
                    continue
            
            # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ - –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω
            unknown_params.append(part)
            i += 1
        
        if unknown_params:
            error_msg = f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {', '.join(unknown_params)}\n"
            error_msg += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ ciadpi"
            return False, error_msg
        
        return True, ""

    def show_settings(self, widget=None):
        ###
        print("DEBUG: show_settings called")
        try:        
###            
            """–î–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
            dialog = Gtk.Dialog(title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ CIADPI", flags=0)
            dialog.add_buttons(Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL,
                            Gtk.STOCK_OK, Gtk.ResponseType.OK)
            dialog.set_default_size(700, 400)

            content_area = dialog.get_content_area()
            
            main_box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=10)
            main_box.set_margin_top(10)
            main_box.set_margin_bottom(10)
            main_box.set_margin_start(10)
            main_box.set_margin_end(10)
            
            # –û—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞
            label = Gtk.Label(label="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞ CIADPI:")
            label.set_xalign(0)
            entry = Gtk.Entry()
            current_params = self.get_current_service_params()
            entry.set_text(current_params)
            entry.set_width_chars(70)
            
            # –§—Ä–µ–π–º —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
            examples_frame = Gtk.Frame()
            examples_frame.set_shadow_type(Gtk.ShadowType.IN)
            
            examples_box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=5)
            examples_box.set_margin_top(10)
            examples_box.set_margin_bottom(10)
            examples_box.set_margin_start(10)
            examples_box.set_margin_end(10)
            
            examples_title = Gtk.Label()
            examples_title.set_markup("<b>–ü—Ä–∏–º–µ—Ä—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–∫–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è):</b>")
            examples_title.set_xalign(0)
            examples_box.pack_start(examples_title, False, False, 0)
            
            # –°–ø–∏—Å–æ–∫ –ø—Ä–∏–º–µ—Ä–æ–≤
            examples = [
                "-o1 -o25+s -T3 -At o--tlsrec 1+s",
                "-o2 -o15+s -T2 -At o--tlsrec", 
                "-o1 -o5+s -T1 -At",
                "-o3 -o20+s -T3 -At o--tlsrec 2+s",
                "-o4 -o10+m -T5 -A torst -L 1"
            ]
            
            for example in examples:
                example_box = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=5)
                
                # –ü–æ–ª–µ —Å –ø—Ä–∏–º–µ—Ä–æ–º (–≤—ã–¥–µ–ª—è–µ–º–æ–µ –∏ –∫–æ–ø–∏—Ä—É–µ–º–æ–µ)
                example_entry = Gtk.Entry()
                example_entry.set_text(example)
                example_entry.set_editable(False)
                example_entry.set_can_focus(False)
                example_entry.set_hexpand(True)
                
                # –°—Ç–∏–ª—å –¥–ª—è –ø–æ–ª—è –ø—Ä–∏–º–µ—Ä–∞
                example_entry.set_size_request(400, 30)
                example_entry.override_background_color(Gtk.StateFlags.NORMAL, 
                                                    Gdk.RGBA(0.95, 0.95, 0.95, 1.0))
                example_entry.override_color(Gtk.StateFlags.NORMAL, 
                                        Gdk.RGBA(0.2, 0.2, 0.2, 1.0))
                
                # –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
                copy_btn = Gtk.Button.new_from_icon_name("edit-copy-symbolic", Gtk.IconSize.BUTTON)
                copy_btn.set_tooltip_text("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
                copy_btn.connect("clicked", self.on_copy_example, example)
                
                # –ö–ª–∏–∫ –ø–æ –ø–æ–ª—é —Ç–æ–∂–µ –∫–æ–ø–∏—Ä—É–µ—Ç
                example_entry.connect("button-press-event", self.on_example_clicked, example)
                
                example_box.pack_start(example_entry, True, True, 0)
                example_box.pack_start(copy_btn, False, False, 0)
                examples_box.pack_start(example_box, False, False, 0)
            
            examples_frame.add(examples_box)
            
            # –ü–æ–¥—Å–∫–∞–∑–∫–∞
            hint_label = Gtk.Label()
            hint_label.set_markup("<small>üí° –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏</small>")
            hint_label.set_xalign(0)
            hint_label.set_sensitive(False)
            
            main_box.pack_start(label, False, False, 0)
            main_box.pack_start(entry, False, False, 0)
            main_box.pack_start(examples_frame, True, True, 0)
            main_box.pack_start(hint_label, False, False, 0)
            
            content_area.pack_start(main_box, True, True, 0)
            content_area.show_all()             
###
            response = dialog.run()
            print(f"DEBUG: Dialog response: {response}")
            
            if response == Gtk.ResponseType.OK:
                print("DEBUG: OK clicked")
                new_params = entry.get_text().strip()
                print(f"DEBUG: New params: {new_params}")
                if new_params and new_params != current_params:
                    print("DEBUG: Calling update_service_params")
                    threading.Thread(
                        self.show_notification("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...", "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ"),
                        target=self.update_service_params, 
                        args=(new_params,),
                        daemon=True
                    ).start()    

            else:
                print("DEBUG: Cancel or close clicked")
            dialog.destroy()                 
              
                
        except Exception as e:
            print(f"ERROR in show_settings: {e}")
            import traceback
            traceback.print_exc()                    
###            

    def on_copy_example(self, button, example_text):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        clipboard = Gtk.Clipboard.get(Gdk.SELECTION_CLIPBOARD)
        clipboard.set_text(example_text, -1)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        self.show_notification("–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ:", f" {example_text}")

    def on_example_clicked(self, widget, event, example_text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –ø–æ–ª—é —Å –ø—Ä–∏–º–µ—Ä–æ–º"""
        if event.type == Gdk.EventType.BUTTON_PRESS:
            self.on_copy_example(None, example_text)
            return True
        return False

    def show_autosearch_dialog(self, widget):
        """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥ –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞"""
        if not self.autosearcher:
            self.show_notification("–û—à–∏–±–∫–∞", "–ú–æ–¥—É–ª—å –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        dialog = Gtk.Dialog(title="–ê–≤—Ç–æ–ø–æ–∏—Å–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", flags=0)
        dialog.add_buttons(Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL,
                         "–ó–∞–ø—É—Å–∫", Gtk.ResponseType.OK)
        dialog.set_default_size(400, 200)

        content_area = dialog.get_content_area()
        
        box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=10)
        box.set_margin_top(10)
        box.set_margin_bottom(10)
        box.set_margin_start(10)
        box.set_margin_end(10)
        
        label = Gtk.Label(label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤:")
        spin = Gtk.SpinButton.new_with_range(1, 1000, 1)
        spin.set_value(50)
        
        box.pack_start(label, False, False, 0)
        box.pack_start(spin, False, False, 0)
        
        content_area.pack_start(box, True, True, 0)
        content_area.show_all()
        
        response = dialog.run()
        
        if response == Gtk.ResponseType.OK:
            self.run_simple_autosearch(int(spin.get_value()))
        
        dialog.destroy()

    def run_simple_autosearch(self, max_tests):
        """–ü—Ä–æ—Å—Ç–æ–π –∞–≤—Ç–æ–ø–æ–∏—Å–∫"""
        def search_thread():
            try:
                best_params, best_speed = self.autosearcher.find_optimal_params(max_tests, 15)
                if best_params:
                    self.show_notification("–ù–∞–π–¥–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", f"–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {best_params}")
                    self.update_service_params(best_params)
                else:
                    self.show_notification("–ü–æ–∏—Å–∫", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–∞–±–æ—á–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
            except Exception as e:
                self.show_notification("–û—à–∏–±–∫–∞", str(e))
        
        threading.Thread(target=search_thread, daemon=True).start()

    def stop_autosearch(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞"""
        if self.autosearcher and hasattr(self, 'is_searching') and self.is_searching:
            self.autosearcher.stop_search()
            self.is_searching = False

    def show_history(self, widget):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not self.autosearcher:
            self.show_notification("–û—à–∏–±–∫–∞", "–ú–æ–¥—É–ª—å –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        history = self.autosearcher.get_history(20)
        
        dialog = Gtk.Dialog(title="–ò—Å—Ç–æ—Ä–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", flags=0)
        dialog.add_buttons(Gtk.STOCK_CLOSE, Gtk.ResponseType.CLOSE)
        dialog.set_default_size(600, 400)
        
        content_area = dialog.get_content_area()
        scroll = Gtk.ScrolledWindow()
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤—ã–≤–æ–¥
        text_view = Gtk.TextView()
        text_view.set_editable(False)
        text_view.set_wrap_mode(Gtk.WrapMode.WORD)
        
        buffer = text_view.get_buffer()
        text = "–ò—Å—Ç–æ—Ä–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
        
        for item in history:
            status = "‚úÖ" if item.get("success", False) else "‚ùå"
            text += f"{status} {item['params']}\n"
        
        buffer.set_text(text)
        scroll.add(text_view)
        content_area.pack_start(scroll, True, True, 0)
        content_area.show_all()
        
        dialog.run()
        dialog.destroy()

    def show_logs(self, widget):
        try:
            subprocess.Popen([
                'gnome-terminal', '--', 
                'bash', '-c', 
                'echo "–õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞ ciadpi:"; '
                'journalctl -u ciadpi.service -n 50 --no-pager; '
                'echo ""; '
                'read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞"'
            ])
        except:
            try:
                subprocess.Popen([
                    'xterm', '-e',
                    'echo "–õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞ ciadpi:"; '
                    'journalctl -u ciadpi.service -n 50 --no-pager; '
                    'echo ""; '
                    'read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞"'
                ])
            except:
                self.show_notification("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª")

    def show_help(self, widget):
        """–û–∫–Ω–æ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"""
        help_text = "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º CIADPI\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—É—Å–∫–∞."
        
        dialog = Gtk.Dialog(title="–°–ø—Ä–∞–≤–∫–∞", flags=0)
        dialog.add_buttons(Gtk.STOCK_OK, Gtk.ResponseType.OK)
        dialog.set_default_size(400, 300)
        
        content_area = dialog.get_content_area()
        scroll = Gtk.ScrolledWindow()
        
        text_view = Gtk.TextView()
        text_view.set_editable(False)
        text_view.set_wrap_mode(Gtk.WrapMode.WORD)
        
        buffer = text_view.get_buffer()
        buffer.set_text(help_text)
        
        scroll.add(text_view)
        content_area.pack_start(scroll, True, True, 0)
        content_area.show_all()
        
        dialog.run()
        dialog.destroy()

    def show_about(self, widget):
        """–û–∫–Ω–æ '–û –ø—Ä–æ–≥—Ä–∞–º–º–µ'"""
        about_text = "CIADPI Advanced Indicator\n\n–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–º –æ–±—Ö–æ–¥–∞ DPI"
        
        dialog = Gtk.Dialog(title="–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", flags=0)
        dialog.add_buttons(Gtk.STOCK_OK, Gtk.ResponseType.OK)
        dialog.set_default_size(300, 200)
        
        content_area = dialog.get_content_area()
        
        label = Gtk.Label(label=about_text)
        content_area.pack_start(label, True, True, 0)
        content_area.show_all()
        
        dialog.run()
        dialog.destroy()

    def show_notification(self, title, message):
        try:
            subprocess.Popen(['notify-send', '-t', '5000', title, message])
        except:
            pass

    def exit_app(self, widget):
        """–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ–∫—Å–∏"""
        if self.current_params.get("auto_disable_proxy", False) and self.we_changed_proxy:
            try:
                result = subprocess.run(
                    ['systemctl', 'is-active', 'ciadpi.service'],
                    capture_output=True, text=True, timeout=2
                )
                service_running = result.stdout.strip() == 'active'
                
                if not service_running:
                    # –°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    self.restore_system_proxy_backup()
                    # ‚ö†Ô∏è –ù–ï –°–ë–†–ê–°–´–í–ê–ï–ú –§–õ–ê–ì - –æ–Ω —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –∫–æ–Ω—Ñ–∏–≥–µ
                    # self.we_changed_proxy = False  # ‚ùå –£–ë–†–ê–¢–¨ –≠–¢–£ –°–¢–†–û–ö–£
                    self.show_notification("–í—ã—Ö–æ–¥", "–°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                else:
                    print("‚ÑπÔ∏è –°–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω - –æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏")
                    
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞: {e}")
        
        if hasattr(self, 'is_searching') and self.is_searching:
            self.stop_autosearch()
            
        Gtk.main_quit()

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∫ –¥–µ–º–æ–Ω
    import signal
    signal.signal(signal.SIGINT, signal.SIG_DFL)
    
    indicator = AdvancedTrayIndicator()
    Gtk.main()
