#!/usr/bin/env python3

import gi
import re
import subprocess
import threading
import time
import os
import json
import shutil
from pathlib import Path
from datetime import datetime

gi.require_version('Gtk', '3.0')
gi.require_version('AppIndicator3', '0.1')
from gi.repository import Gtk, AppIndicator3, GLib

# –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
DEBUG_LOG = Path.home() / '.config' / 'ciadpi' / 'indicator_debug.log'

def log_debug(message):
    """–ó–∞–ø–∏—Å—å –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
    with open(DEBUG_LOG, 'a', encoding='utf-8') as f:
        f.write(f"[{timestamp}] {message}\n")
    print(f"DEBUG: {message}")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
log_debug("=== Starting CIADPI Indicator ===")
log_debug(f"DISPLAY: {os.environ.get('DISPLAY')}")
log_debug(f"DBUS_SESSION_BUS_ADDRESS: {os.environ.get('DBUS_SESSION_BUS_ADDRESS')}")
log_debug(f"XAUTHORITY: {os.environ.get('XAUTHORITY')}")
log_debug(f"USER: {os.environ.get('USER')}")
log_debug(f"PWD: {os.environ.get('PWD', os.getcwd())}")

# –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
if not os.environ.get('DBUS_SESSION_BUS_ADDRESS'):
    dbus_path = f"/run/user/{os.getuid()}/bus"
    if os.path.exists(dbus_path):
        os.environ['DBUS_SESSION_BUS_ADDRESS'] = f"unix:path={dbus_path}"
        log_debug(f"Restored DBUS_SESSION_BUS_ADDRESS: {os.environ['DBUS_SESSION_BUS_ADDRESS']}")

if not os.environ.get('XAUTHORITY'):
    xauth_path = Path.home() / '.Xauthority'
    if xauth_path.exists():
        os.environ['XAUTHORITY'] = str(xauth_path)
        log_debug(f"Restored XAUTHORITY: {os.environ['XAUTHORITY']}")

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞
try:
    import sys
    sys.path.append(str(Path.home() / '.local' / 'bin'))
    from ciadpi_autosearch import CIAutoSearch
    AUTOSEARCH_AVAILABLE = True
except ImportError as e:
    print(f"–ú–æ–¥—É–ª—å –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    AUTOSEARCH_AVAILABLE = False
    CIAutoSearch = None

class AdvancedTrayIndicator:
    def __init__(self):
        log_debug("Initializing AdvancedTrayIndicator...")
        
        self.app = 'ciadpi_advanced_indicator'
        self.config_file = Path.home() / '.config' / 'ciadpi' / 'config.json'
        self.service_file = Path('/etc/systemd/system/ciadpi.service')
        self.default_params = "-o1 -o25+s -T3 -At o--tlsrec 1+s"
        self.current_params = self.load_config()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
        GLib.timeout_add(5000, self.check_current_proxy)  # –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞   

        self.autosearcher = None
        self.is_searching = False
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞
        # if AUTOSEARCH_AVAILABLE:
        #     self.autosearcher = CIAutoSearch()
        #     self.is_searching = False
        # else:
        #     self.autosearcher = None
        
        # –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        self.indicator = None
        GLib.timeout_add(2000, self.initialize_indicator)  # 2 —Å–µ–∫—É–Ω–¥—ã –∑–∞–¥–µ—Ä–∂–∫–∏
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞
        GLib.timeout_add_seconds(3, self.update_status)
        log_debug("AdvancedTrayIndicator initialization completed")

    def initialize_indicator(self):
        """–û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞"""
        try:
            log_debug("Creating AppIndicator3...")
            
            self.indicator = AppIndicator3.Indicator.new(
                self.app, 
                "network-transmit-receive-symbolic",
                AppIndicator3.IndicatorCategory.APPLICATION_STATUS
            )
            
            self.indicator.set_status(AppIndicator3.IndicatorStatus.ACTIVE)
            self.indicator.set_menu(self.create_menu())
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
            self.update_tooltip()
            
            log_debug("AppIndicator3 created successfully")
            
        except Exception as e:
            log_debug(f"Error creating AppIndicator3: {e}")
            # Fallback –Ω–∞ Gtk.StatusIcon
            self.setup_fallback_indicator()
        
        return False  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä

    def setup_fallback_indicator(self):
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å Gtk.StatusIcon"""
        try:
            log_debug("Setting up Gtk.StatusIcon fallback...")
            self.status_icon = Gtk.StatusIcon()
            self.status_icon.set_from_icon_name("network-transmit-receive-symbolic")
            self.status_icon.set_tooltip_text("CIADPI Indicator")
            self.status_icon.connect("popup-menu", self.on_right_click)
            self.status_icon.connect("activate", self.on_left_click)
            self.status_icon.set_visible(True)
            log_debug("Gtk.StatusIcon setup completed")
        except Exception as e:
            log_debug(f"Error setting up Gtk.StatusIcon: {e}")

    def on_right_click(self, icon, button, time):
        """–ü—Ä–∞–≤—ã–π –∫–ª–∏–∫ –¥–ª—è Gtk.StatusIcon"""
        menu = self.create_menu()
        menu.show_all()
        menu.popup(None, None, None, None, button, time)

    def on_left_click(self, icon):
        """–õ–µ–≤—ã–π –∫–ª–∏–∫ –¥–ª—è Gtk.StatusIcon"""
        self.show_quick_status()

    def show_quick_status(self):
        """–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ –ª–µ–≤–æ–º—É –∫–ª–∏–∫—É"""
        try:
            result = subprocess.run(
                ['systemctl', 'is-active', 'ciadpi.service'],
                capture_output=True, text=True, timeout=2
            )
            status = "üü¢ –ó–∞–ø—É—â–µ–Ω" if result.stdout.strip() == 'active' else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            self.show_notification("–°—Ç–∞—Ç—É—Å CIADPI", status)
        except Exception as e:
            self.show_notification("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å: {e}")

    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        default_config = {
            "params": self.default_params,
            "proxy_enabled": False,
            "proxy_host": "127.0.0.1",
            "proxy_port": "1080",
            "current_params": self.default_params
        }
        
        try:
            self.config_file.parent.mkdir(exist_ok=True)
            if self.config_file.exists():
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –µ—Å—Ç—å
                    for key in default_config:
                        if key not in config:
                            config[key] = default_config[key]
                    return config
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
            
        return default_config

    def save_config(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(self.current_params, f, indent=2, ensure_ascii=False)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: {e}")

    def update_tooltip(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–π –ø–æ–¥—Å–∫–∞–∑–∫–∏"""
        if hasattr(self, 'indicator') and self.indicator:
            current_params = self.get_current_service_params()
            tooltip_text = f"CIADPI - {current_params}" if current_params else "CIADPI Indicator"
            self.indicator.set_title(tooltip_text)

    def get_current_service_params(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ systemd —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            result = subprocess.run(
                ['systemctl', 'show', 'ciadpi.service', '--property=ExecStart', '--no-pager'],
                capture_output=True, text=True, timeout=5
            )
            if result.returncode == 0:
                output = result.stdout.strip()
                if 'argv[]=' in output:
                    parts = output.split('argv[]=')
                    if len(parts) > 1:
                        args = parts[1].split(';')[0].split()
                        if len(args) > 1:
                            return ' '.join(args[1:])
            return self.default_params
        except:
            return self.default_params

    def update_service_params(self, new_params):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ systemd —Å–µ—Ä–≤–∏—Å–µ"""
        try:
            print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {new_params}")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å
            subprocess.run(['sudo', 'systemctl', 'stop', 'ciadpi.service'], 
                          check=False, timeout=10)
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π override —Ñ–∞–π–ª
            override_dir = Path('/etc/systemd/system/ciadpi.service.d')
            override_file = override_dir / 'override.conf'
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ—Ç
            subprocess.run(['sudo', 'mkdir', '-p', str(override_dir)])
            
            # –°–æ–∑–¥–∞–µ–º override –∫–æ–Ω—Ñ–∏–≥
            override_content = f"""[Service]
ExecStart=
ExecStart=/home/templard/byedpi/ciadpi {new_params}
Restart=always
RestartSec=5
"""
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_file = Path('/tmp/ciadpi_override.conf')
            with open(temp_file, 'w', encoding='utf-8') as f:
                f.write(override_content)
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Å –ø—Ä–∞–≤–∞–º–∏ root
            subprocess.run(['sudo', 'cp', str(temp_file), str(override_file)])
            subprocess.run(['sudo', 'systemctl', 'daemon-reload'])
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥
            self.current_params["current_params"] = new_params
            self.current_params["params"] = new_params
            self.save_config()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
            subprocess.run(['sudo', 'systemctl', 'start', 'ciadpi.service'])
            
            print("‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            return True
            
        except Exception as e:
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
            # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å
            try:
                subprocess.run(['sudo', 'systemctl', 'daemon-reload'])
                subprocess.run(['sudo', 'systemctl', 'start', 'ciadpi.service'])
            except:
                pass
            return False

    def create_menu(self):
        menu = Gtk.Menu()
        
        # –°—Ç–∞—Ç—É—Å
        self.status_item = Gtk.MenuItem(label="üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞...")
        menu.append(self.status_item)
        
        menu.append(Gtk.SeparatorMenuItem())
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–º
        start_item = Gtk.MenuItem(label="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å")
        start_item.connect("activate", self.start_service)
        menu.append(start_item)
        
        stop_item = Gtk.MenuItem(label="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å")
        stop_item.connect("activate", self.stop_service)
        menu.append(stop_item)
        
        restart_item = Gtk.MenuItem(label="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å")
        restart_item.connect("activate", self.restart_service)
        menu.append(restart_item)
        
        menu.append(Gtk.SeparatorMenuItem())
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_item = Gtk.MenuItem(label="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        settings_item.connect("activate", self.show_settings)
        menu.append(settings_item)
        
        proxy_item = Gtk.MenuItem(label="üîå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏")
        proxy_item.connect("activate", self.show_proxy_settings)
        menu.append(proxy_item)
        
        menu.append(Gtk.SeparatorMenuItem())
        
        # –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –∏ –∏—Å—Ç–æ—Ä–∏—è
        if self.autosearcher:
            autosearch_item = Gtk.MenuItem(label="üîç –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
            autosearch_item.connect("activate", self.show_autosearch_dialog)
            menu.append(autosearch_item)
            
            history_item = Gtk.MenuItem(label="üìä –ò—Å—Ç–æ—Ä–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            history_item.connect("activate", self.show_history)
            menu.append(history_item)
            
            menu.append(Gtk.SeparatorMenuItem())
        
        # –õ–æ–≥–∏
        logs_item = Gtk.MenuItem(label="üìã –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏")
        logs_item.connect("activate", self.show_logs)
        menu.append(logs_item)
        
        menu.append(Gtk.SeparatorMenuItem())
        
        # –°–ø—Ä–∞–≤–∫–∞
        help_item = Gtk.MenuItem(label="‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º")
        help_item.connect("activate", self.show_help)
        menu.append(help_item)
        
        about_item = Gtk.MenuItem(label="‚ÑπÔ∏è –û –ø—Ä–æ–≥—Ä–∞–º–º–µ")
        about_item.connect("activate", self.show_about)
        menu.append(about_item)
        
        menu.append(Gtk.SeparatorMenuItem())
        
        # –í—ã—Ö–æ–¥
        exit_item = Gtk.MenuItem(label="üö™ –í—ã—Ö–æ–¥")
        exit_item.connect("activate", self.exit_app)
        menu.append(exit_item)
        
        menu.show_all()
        return menu

    def update_status(self):
        try:
            result = subprocess.run(
                ['systemctl', 'is-active', 'ciadpi.service'],
                capture_output=True, text=True, timeout=2
            )
            status = result.stdout.strip()
            
            current_params = self.get_current_service_params()
            status_text = "–ó–∞–ø—É—â–µ–Ω" if status == 'active' else "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            
            if hasattr(self, 'indicator') and self.indicator:
                if status == 'active':
                    self.indicator.set_icon_full("network-transmit-receive-symbolic", "CIADPI –∑–∞–ø—É—â–µ–Ω")
                    self.status_item.set_label(f"‚úÖ CIADPI {status_text}")
                else:
                    self.indicator.set_icon_full("network-offline-symbolic", "CIADPI –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    self.status_item.set_label(f"‚ùå CIADPI {status_text}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
                self.update_tooltip()
            elif hasattr(self, 'status_icon'):
                # –î–ª—è Gtk.StatusIcon
                if status == 'active':
                    self.status_icon.set_from_icon_name("network-transmit-receive-symbolic")
                    self.status_icon.set_tooltip_text(f"CIADPI {status_text}")
                else:
                    self.status_icon.set_from_icon_name("network-offline-symbolic")
                    self.status_icon.set_tooltip_text(f"CIADPI {status_text}")
                
        except Exception as e:
            if hasattr(self, 'status_item'):
                self.status_item.set_label("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞")
            
        return True
    
    def sync_proxy_settings(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏ —Å —Å–∏—Å—Ç–µ–º–æ–π"""
        try:
            current_system = self.get_system_proxy_settings()
            current_config = self.current_params
            
            # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è, –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ
            if (current_config.get("proxy_mode") != current_system.get('mode') or
                current_config.get("proxy_host") != current_system.get('http_host')):
                
                print("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏...")
                self.current_params["proxy_mode"] = current_system.get('mode', 'none')
                self.current_params["proxy_enabled"] = current_system.get('mode') != 'none'
                self.current_params["proxy_host"] = current_system.get('http_host', '127.0.0.1')
                self.current_params["proxy_port"] = current_system.get('http_port', '1080')
                self.save_config()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏: {e}")
        
        return False  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä    
    

    def show_proxy_settings(self, widget):
        """–î–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏"""
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        current_settings = self.get_system_proxy_settings()
        
        dialog = Gtk.Dialog(title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏", flags=0)
        dialog.add_buttons(Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL,
                        Gtk.STOCK_OK, Gtk.ResponseType.OK)
        dialog.set_default_size(500, 350)

        content_area = dialog.get_content_area()
        
        box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=10)
        box.set_margin_top(10)
        box.set_margin_bottom(10)
        box.set_margin_start(10)
        box.set_margin_end(10)
        
        # –†–µ–∂–∏–º –ø—Ä–æ–∫—Å–∏
        mode_label = Gtk.Label(label="–†–µ–∂–∏–º –ø—Ä–æ–∫—Å–∏:")
        mode_combo = Gtk.ComboBoxText()
        mode_combo.append_text("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π (PAC)")
        mode_combo.append_text("–†—É—á–Ω–æ–π") 
        mode_combo.append_text("–í—ã–∫–ª—é—á–µ–Ω")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º
        current_mode = current_settings.get('mode', 'none')
        if current_mode == 'auto':
            mode_combo.set_active(0)
        elif current_mode == 'manual':
            mode_combo.set_active(1)
        else:
            mode_combo.set_active(2)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä—É—á–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏
        manual_frame = Gtk.Frame(label="–†—É—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏")
        manual_box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=5)
        manual_box.set_margin_top(5)
        manual_box.set_margin_bottom(5)
        manual_box.set_margin_start(5)
        manual_box.set_margin_end(5)
        
        # –•–æ—Å—Ç
        host_label = Gtk.Label(label="–•–æ—Å—Ç –ø—Ä–æ–∫—Å–∏ (–æ—Å—Ç–∞–≤—å—Ç–µ –ü–£–°–¢–´–ú –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø–æ—Ä—Ç–∞):")
        host_entry = Gtk.Entry()
        host_entry.set_placeholder_text("–ü–£–°–¢–û–ï –∑–Ω–∞—á–µ–Ω–∏–µ - —Ç–æ–ª—å–∫–æ –ø–æ—Ä—Ç")
        current_host = current_settings.get('http_host', '')
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º–µ–Ω–Ω–æ —Ç–æ, —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π)
        host_entry.set_text(current_host)
        
        # –ü–æ—Ä—Ç
        port_label = Gtk.Label(label="–ü–æ—Ä—Ç –ø—Ä–æ–∫—Å–∏:")
        port_entry = Gtk.Entry()
        port_entry.set_text(current_settings.get('http_port', '1080'))
        
        # –ü—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ä–º–∞—Ç–æ–≤
        examples_label = Gtk.Label(label="–í–∞–∂–Ω–æ:\n‚Ä¢ –ü—É—Å—Ç–æ–µ –ø–æ–ª–µ —Ö–æ—Å—Ç–∞ = —Ç–æ–ª—å–∫–æ –ø–æ—Ä—Ç\n‚Ä¢ 127.0.0.1 = —Ö–æ—Å—Ç + –ø–æ—Ä—Ç")
        examples_label.set_sensitive(False)
        
        manual_box.pack_start(host_label, False, False, 0)
        manual_box.pack_start(host_entry, False, False, 0)
        manual_box.pack_start(port_label, False, False, 0)
        manual_box.pack_start(port_entry, False, False, 0)
        manual_box.pack_start(examples_label, False, False, 0)
        manual_frame.add(manual_box)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_label = Gtk.Label(label="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –∫–æ –≤—Å–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º")
        info_label.set_sensitive(False)
        
        # –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        current_host_display = "–ü–£–°–¢–û–ô (—Ç–æ–ª—å–∫–æ –ø–æ—Ä—Ç)" if not current_settings.get('http_host') else current_settings.get('http_host')
        current_port_display = current_settings.get('http_port', '–Ω–µ —É–∫–∞–∑–∞–Ω')
        status_label = Gtk.Label(label=f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {current_settings.get('mode', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n–•–æ—Å—Ç: {current_host_display}, –ü–æ—Ä—Ç: {current_port_display}")
        status_label.set_sensitive(False)
        
        box.pack_start(mode_label, False, False, 0)
        box.pack_start(mode_combo, False, False, 0)
        box.pack_start(manual_frame, False, False, 0)
        box.pack_start(status_label, False, False, 0)
        box.pack_start(info_label, False, False, 0)
        
        content_area.pack_start(box, True, True, 0)
        content_area.show_all()
        
        response = dialog.run()
        
        if response == Gtk.ResponseType.OK:
            mode_index = mode_combo.get_active()
            modes = ['auto', 'manual', 'none']
            selected_mode = modes[mode_index] if mode_index >= 0 else 'none'
            
            # –ü–æ–ª—É—á–∞–µ–º —Ö–æ—Å—Ç –∏ –ø–æ—Ä—Ç
            proxy_host = host_entry.get_text().strip()
            proxy_port = port_entry.get_text().strip()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ü–£–°–¢–û–ï –∑–Ω–∞—á–µ–Ω–∏–µ –µ—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ
            # –ù–µ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –Ω–∏–∫–∞–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é!
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ—Ä—Ç–∞
            if not proxy_port.isdigit():
                self.show_notification("–û—à–∏–±–∫–∞", "–ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                dialog.destroy()
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ñ–∏–≥ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –ü–£–°–¢–£–Æ —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ)
            self.current_params["proxy_enabled"] = selected_mode != 'none'
            self.current_params["proxy_host"] = proxy_host  # –ú–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π
            self.current_params["proxy_port"] = proxy_port
            self.current_params["proxy_mode"] = selected_mode
            self.save_config()
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            success = self.apply_system_proxy(selected_mode, proxy_host, proxy_port)
            
            if success:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                display_host = "–ü–£–°–¢–û–ô" if not proxy_host else proxy_host
                self.show_notification("–ü—Ä–æ–∫—Å–∏", f"–ü—Ä–æ–∫—Å–∏ {selected_mode} –ø—Ä–∏–º–µ–Ω–µ–Ω\n–•–æ—Å—Ç: {display_host}\n–ü–æ—Ä—Ç: {proxy_port}")
            else:
                self.show_notification("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏")
        
        dialog.destroy()

    def get_system_proxy_settings(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏"""
        log_debug("show_proxy_settings called")  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É

        settings = {
            'mode': 'none',
            'http_host': '127.0.0.1',
            'http_port': '1080'
        }
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∂–∏–º –ø—Ä–æ–∫—Å–∏
            result = subprocess.run([
                'gsettings', 'get', 'org.gnome.system.proxy', 'mode'
            ], capture_output=True, text=True, check=False)
            
            if result.returncode == 0:
                mode = result.stdout.strip().strip("'")
                settings['mode'] = mode
                
                if mode == 'manual':
                    # –ü–æ–ª—É—á–∞–µ–º HTTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    host_result = subprocess.run([
                        'gsettings', 'get', 'org.gnome.system.proxy.http', 'host'
                    ], capture_output=True, text=True, check=False)
                    port_result = subprocess.run([
                        'gsettings', 'get', 'org.gnome.system.proxy.http', 'port'
                    ], capture_output=True, text=True, check=False)
                    
                    if host_result.returncode == 0:
                        settings['http_host'] = host_result.stdout.strip().strip("'")
                    if port_result.returncode == 0:
                        settings['http_port'] = port_result.stdout.strip()
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏: {e}")
        
        return settings    

    def apply_system_proxy(self, mode, host, port):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ NetworkManager"""
        try:
            # –ú–µ—Ç–æ–¥ 1: –ß–µ—Ä–µ–∑ gsettings (–¥–ª—è GNOME –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π)
            subprocess.run([
                'gsettings', 'set', 'org.gnome.system.proxy', 'mode', mode
            ], check=False)
            
            if mode == 'manual':
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ü–£–°–¢–û–ï –∑–Ω–∞—á–µ–Ω–∏–µ –µ—Å–ª–∏ host –ø—É—Å—Ç–æ–π
                # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ø—É—Å—Ç—ã–º —Ö–æ—Å—Ç–æ–º
                effective_host = host  # –ú–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π!
                
                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º HTTP
                subprocess.run([
                    'gsettings', 'set', 'org.gnome.system.proxy.http', 'host', effective_host
                ], check=False)
                subprocess.run([
                    'gsettings', 'set', 'org.gnome.system.proxy.http', 'port', port
                ], check=False)
                
                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º HTTPS
                subprocess.run([
                    'gsettings', 'set', 'org.gnome.system.proxy.https', 'host', effective_host
                ], check=False)
                subprocess.run([
                    'gsettings', 'set', 'org.gnome.system.proxy.https', 'port', port
                ], check=False)
                
                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º FTP
                subprocess.run([
                    'gsettings', 'set', 'org.gnome.system.proxy.ftp', 'host', effective_host
                ], check=False)
                subprocess.run([
                    'gsettings', 'set', 'org.gnome.system.proxy.ftp', 'port', port
                ], check=False)
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
                subprocess.run([
                    'gsettings', 'set', 'org.gnome.system.proxy', 'use-same-proxy', 'true'
                ], check=False)
                
            elif mode == 'auto':
                # –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞ –æ–±—ã—á–Ω–æ –Ω—É–∂–µ–Ω PAC URL
                # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –ø—É—Å—Ç—ã–º
                pass
                
            host_display = "–ü–£–°–¢–û–ô" if not host else host
            print(f"‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–∫—Å–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {mode} –•–æ—Å—Ç: {host_display} –ü–æ—Ä—Ç: {port}")
            
            # –ú–µ—Ç–æ–¥ 2: –ß–µ—Ä–µ–∑ Environment (–¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π)
            self.apply_environment_proxy(mode, host, port)
            
            # –ú–µ—Ç–æ–¥ 3: –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º NetworkManager –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
            self.restart_network_services()
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏: {e}")
            return False
    
    def apply_environment_proxy(self, mode, host, port):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        try:
            if mode == 'manual':
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –ø—Ä–æ–∫—Å–∏ - –µ—Å–ª–∏ —Ö–æ—Å—Ç –ü–£–°–¢–û–ô, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Ä—Ç
                if host:
                    proxy_url = f"http://{host}:{port}"
                else:
                    # –ü–£–°–¢–û–ô —Ö–æ—Å—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Ä—Ç (–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Ç–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç)
                    proxy_url = f"http://:{port}"  # –§–æ—Ä–º–∞—Ç —Å –ø—É—Å—Ç—ã–º —Ö–æ—Å—Ç–æ–º
                
                # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (–¥–ª—è –Ω–æ–≤—ã—Ö —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤)
                env_file = Path.home() / '.proxy_env'
                with open(env_file, 'w') as f:
                    f.write(f"""export http_proxy={proxy_url}
    export https_proxy={proxy_url}
    export ftp_proxy={proxy_url}
    export HTTP_PROXY={proxy_url}
    export HTTPS_PROXY={proxy_url}
    export FTP_PROXY={proxy_url}
    """)
                print(f"‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {proxy_url}")
            else:
                # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
                env_file = Path.home() / '.proxy_env'
                if env_file.exists():
                    env_file.unlink()
                print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã")
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")

    def restart_network_services(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ç–µ–≤—ã—Ö —Å–ª—É–∂–± –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º NetworkManager
            subprocess.run(['sudo', 'systemctl', 'restart', 'NetworkManager'], 
                          check=False, timeout=10)
            print("‚úÖ NetworkManager –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
            
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º systemd-resolved –¥–ª—è DNS
            subprocess.run(['sudo', 'systemctl', 'restart', 'systemd-resolved'], 
                          check=False, timeout=5)
            print("‚úÖ systemd-resolved –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö —Å–ª—É–∂–±: {e}")

    def get_proxy_env(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–∫—Å–∏"""
        if self.current_params.get("proxy_enabled", False) and self.current_params.get("proxy_mode") == 'manual':
            host = self.current_params.get("proxy_host", "127.0.0.1")
            port = self.current_params.get("proxy_port", "1080")
            return {
                'http_proxy': f"http://{host}:{port}",
                'https_proxy': f"http://{host}:{port}",
                'HTTP_PROXY': f"http://{host}:{port}",
                'HTTPS_PROXY': f"http://{host}:{port}"
            }
        return {}

    def check_current_proxy(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–∏—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ GNOME
            result = subprocess.run([
                'gsettings', 'get', 'org.gnome.system.proxy', 'mode'
            ], capture_output=True, text=True, check=False)
            
            if result.returncode == 0:
                mode = result.stdout.strip().strip("'")
                if mode == 'manual':
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ HTTP –ø—Ä–æ–∫—Å–∏
                    host_result = subprocess.run([
                        'gsettings', 'get', 'org.gnome.system.proxy.http', 'host'
                    ], capture_output=True, text=True, check=False)
                    port_result = subprocess.run([
                        'gsettings', 'get', 'org.gnome.system.proxy.http', 'port'
                    ], capture_output=True, text=True, check=False)
                    
                    host = host_result.stdout.strip().strip("'")
                    port = port_result.stdout.strip()
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥
                    self.current_params["proxy_enabled"] = True
                    self.current_params["proxy_host"] = host
                    self.current_params["proxy_port"] = port
                    self.save_config()
                    
                    print(f"üì° –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏: {host}:{port}")
                else:
                    self.current_params["proxy_enabled"] = False
                    self.save_config()
                    print("üì° –ü—Ä–æ–∫—Å–∏ –æ—Ç–∫–ª—é—á–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏: {e}")

    def run_command(self, command):
        def run_in_thread():
            try:
                env = os.environ.copy()
                proxy_env = self.get_proxy_env()
                env.update(proxy_env)
                
                result = subprocess.run(
                    ['sudo'] + command.split(),
                    capture_output=True, text=True, timeout=10,
                    env=env
                )
                if result.returncode == 0:
                    self.show_notification("–£—Å–ø–µ—Ö", "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                else:
                    self.show_notification("–û—à–∏–±–∫–∞", result.stderr)
                time.sleep(1)
                self.update_status()
            except Exception as e:
                self.show_notification("–û—à–∏–±–∫–∞", str(e))
        
        threading.Thread(target=run_in_thread, daemon=True).start()

    def start_service(self, widget):
        self.run_command("systemctl start ciadpi.service")

    def stop_service(self, widget):
        self.run_command("systemctl stop ciadpi.service")

    def restart_service(self, widget):
        self.run_command("systemctl restart ciadpi.service")

    def apply_params(self, params):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        if self.update_service_params(params):
            self.show_notification("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã", "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å.")
            self.restart_service(None)
            self.update_status()
        else:
            self.show_notification("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")

    def show_settings(self, widget):
        """–î–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        dialog = Gtk.Dialog(title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ CIADPI", flags=0)
        dialog.add_buttons(Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL,
                         Gtk.STOCK_OK, Gtk.ResponseType.OK)
        dialog.set_default_size(600, 150)

        content_area = dialog.get_content_area()
        
        box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=10)
        box.set_margin_top(10)
        box.set_margin_bottom(10)
        box.set_margin_start(10)
        box.set_margin_end(10)
        
        label = Gtk.Label(label="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞ CIADPI:")
        entry = Gtk.Entry()
        current_params = self.get_current_service_params()
        entry.set_text(current_params)
        entry.set_width_chars(60)
        
        box.pack_start(label, False, False, 0)
        box.pack_start(entry, False, False, 0)
        
        content_area.pack_start(box, True, True, 0)
        content_area.show_all()
        
        response = dialog.run()
        
        if response == Gtk.ResponseType.OK:
            new_params = entry.get_text().strip()
            if new_params and new_params != current_params:
                self.apply_params(new_params)
        
        dialog.destroy()

    def show_autosearch_dialog(self, widget):
        """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥ –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞"""
        if not self.autosearcher:
            self.show_notification("–û—à–∏–±–∫–∞", "–ú–æ–¥—É–ª—å –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        dialog = Gtk.Dialog(title="–ê–≤—Ç–æ–ø–æ–∏—Å–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", flags=0)
        dialog.add_buttons(Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL,
                         "–ó–∞–ø—É—Å–∫", Gtk.ResponseType.OK)
        dialog.set_default_size(400, 200)

        content_area = dialog.get_content_area()
        
        box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=10)
        box.set_margin_top(10)
        box.set_margin_bottom(10)
        box.set_margin_start(10)
        box.set_margin_end(10)
        
        label = Gtk.Label(label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤:")
        spin = Gtk.SpinButton.new_with_range(1, 1000, 1)
        spin.set_value(50)
        
        box.pack_start(label, False, False, 0)
        box.pack_start(spin, False, False, 0)
        
        content_area.pack_start(box, True, True, 0)
        content_area.show_all()
        
        response = dialog.run()
        
        if response == Gtk.ResponseType.OK:
            self.run_simple_autosearch(int(spin.get_value()))
        
        dialog.destroy()

    def run_simple_autosearch(self, max_tests):
        """–ü—Ä–æ—Å—Ç–æ–π –∞–≤—Ç–æ–ø–æ–∏—Å–∫"""
        def search_thread():
            try:
                best_params, best_speed = self.autosearcher.find_optimal_params(max_tests, 15)
                if best_params:
                    self.show_notification("–ù–∞–π–¥–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", f"–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {best_params}")
                    self.apply_params(best_params)
                else:
                    self.show_notification("–ü–æ–∏—Å–∫", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–∞–±–æ—á–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
            except Exception as e:
                self.show_notification("–û—à–∏–±–∫–∞", str(e))
        
        threading.Thread(target=search_thread, daemon=True).start()

    def stop_autosearch(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞"""
        if self.autosearcher and hasattr(self, 'is_searching') and self.is_searching:
            self.autosearcher.stop_search()
            self.is_searching = False

    def show_history(self, widget):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not self.autosearcher:
            self.show_notification("–û—à–∏–±–∫–∞", "–ú–æ–¥—É–ª—å –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        history = self.autosearcher.get_history(20)
        
        dialog = Gtk.Dialog(title="–ò—Å—Ç–æ—Ä–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", flags=0)
        dialog.add_buttons(Gtk.STOCK_CLOSE, Gtk.ResponseType.CLOSE)
        dialog.set_default_size(600, 400)
        
        content_area = dialog.get_content_area()
        scroll = Gtk.ScrolledWindow()
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤—ã–≤–æ–¥
        text_view = Gtk.TextView()
        text_view.set_editable(False)
        text_view.set_wrap_mode(Gtk.WrapMode.WORD)
        
        buffer = text_view.get_buffer()
        text = "–ò—Å—Ç–æ—Ä–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
        
        for item in history:
            status = "‚úÖ" if item.get("success", False) else "‚ùå"
            text += f"{status} {item['params']}\n"
        
        buffer.set_text(text)
        scroll.add(text_view)
        content_area.pack_start(scroll, True, True, 0)
        content_area.show_all()
        
        dialog.run()
        dialog.destroy()

    def show_logs(self, widget):
        try:
            subprocess.Popen([
                'gnome-terminal', '--', 
                'bash', '-c', 
                'echo "–õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞ ciadpi:"; '
                'journalctl -u ciadpi.service -n 50 --no-pager; '
                'echo ""; '
                'read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞"'
            ])
        except:
            try:
                subprocess.Popen([
                    'xterm', '-e',
                    'echo "–õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞ ciadpi:"; '
                    'journalctl -u ciadpi.service -n 50 --no-pager; '
                    'echo ""; '
                    'read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞"'
                ])
            except:
                self.show_notification("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª")

    def show_help(self, widget):
        """–û–∫–Ω–æ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"""
        help_text = "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º CIADPI\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—É—Å–∫–∞."
        
        dialog = Gtk.Dialog(title="–°–ø—Ä–∞–≤–∫–∞", flags=0)
        dialog.add_buttons(Gtk.STOCK_OK, Gtk.ResponseType.OK)
        dialog.set_default_size(400, 300)
        
        content_area = dialog.get_content_area()
        scroll = Gtk.ScrolledWindow()
        
        text_view = Gtk.TextView()
        text_view.set_editable(False)
        text_view.set_wrap_mode(Gtk.WrapMode.WORD)
        
        buffer = text_view.get_buffer()
        buffer.set_text(help_text)
        
        scroll.add(text_view)
        content_area.pack_start(scroll, True, True, 0)
        content_area.show_all()
        
        dialog.run()
        dialog.destroy()

    def show_about(self, widget):
        """–û–∫–Ω–æ '–û –ø—Ä–æ–≥—Ä–∞–º–º–µ'"""
        about_text = "CIADPI Advanced Indicator\n\n–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–º –æ–±—Ö–æ–¥–∞ DPI"
        
        dialog = Gtk.Dialog(title="–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", flags=0)
        dialog.add_buttons(Gtk.STOCK_OK, Gtk.ResponseType.OK)
        dialog.set_default_size(300, 200)
        
        content_area = dialog.get_content_area()
        
        label = Gtk.Label(label=about_text)
        content_area.pack_start(label, True, True, 0)
        content_area.show_all()
        
        dialog.run()
        dialog.destroy()

    def show_notification(self, title, message):
        try:
            subprocess.Popen(['notify-send', '-t', '5000', title, message])
        except:
            pass

    def exit_app(self, widget):
        if hasattr(self, 'is_searching') and self.is_searching:
            self.stop_autosearch()
        Gtk.main_quit()

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∫ –¥–µ–º–æ–Ω
    import signal
    signal.signal(signal.SIGINT, signal.SIG_DFL)
    
    indicator = AdvancedTrayIndicator()
    Gtk.main()
